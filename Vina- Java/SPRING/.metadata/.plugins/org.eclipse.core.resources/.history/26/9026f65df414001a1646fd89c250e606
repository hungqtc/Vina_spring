
package com.hung.controller;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.hung.dto.BookDTO;
import com.hung.jwt.JwtTokenProvider;
import com.hung.output.BookOutput;
import com.hung.security.CustomUserDetails;
import com.hung.service.BookService;
import com.hung.utils.SecurityUtil;

@RestController
public class BookController {

	@Autowired
	private JwtTokenProvider tokenProvider;
	
	CustomUserDetails userLogin = (CustomUserDetails) SecurityUtil.getPrincipal();

	@Autowired
	BookService bookService;

	@GetMapping(value = "/book")
	public BookOutput getAll( @RequestParam(value = "page", required = false) Integer page,
			 @RequestParam(value = "limit", required = false) Integer limit) {
		BookOutput result = new BookOutput();
		//user dang dang nhap
		userLogin = (CustomUserDetails) SecurityUtil.getPrincipal();
		
		String roles = userLogin.getAuthorities().toString();
		
		if (page != null && limit != null) {
			result.setPage(page);
			Pageable pageable = new PageRequest(page - 1, limit);
			
			if (roles.concat("[ROLE_ADMIN]") != null ) {
				result.setListResult(bookService.findAll(pageable));
			} else {
				result.setListResult(bookService.findAllByUserCreated(userLogin.getUsername(), pageable));
			}
			result.setTotalPage((int) Math.ceil((double) (bookService.totalItem()) / limit));
		} else {
			result.setListResult(bookService.findAll());
		}
		return result;
		
	}

	@GetMapping(value = "/book/{id}")
	public BookDTO getOneById(@PathVariable long id) {
		return bookService.getById(id);
	}

	@DeleteMapping(value = "/book")
	public void deleteBook(@PathVariable long[] ids) {
		CustomUserDetails userLogin = (CustomUserDetails) SecurityUtil.getPrincipal();
		List<String> list = new ArrayList<>();
		for (Long id : ids) {
			BookDTO book = bookService.getById(id);
			if (!userLogin.getUsername().equals(book.getCreatedBy())) {
				
			}
		}
		
		bookService.delete(ids);
	}

	@PostMapping(value = "/book")
	public BookDTO insertBook(@RequestBody BookDTO book) {
		return bookService.save(book);
	}

	@PutMapping(value = "/book/{id}")
	public BookDTO editBook(@RequestBody BookDTO book, @PathVariable long id) {
		book.setId(id);
		CustomUserDetails userLogin = (CustomUserDetails) SecurityUtil.getPrincipal();
		BookDTO bookDTO = bookService.getById(id);
		if  (userLogin.getAuthorities().toString().concat("[ROLE_ADMIN]") != null ||
			 userLogin.getUsername().equals(bookDTO.getCreatedBy())) {
			return bookService.save(book);
		}
		return null;
	}

}
